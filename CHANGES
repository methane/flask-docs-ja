.. Flask Changelog
   ===============

Flaskの変更履歴
==================

.. Here you can see the full list of changes between each Flask release.

ここでは、Flaskのリリースごとの変更点のすべてのリストを見ることができます。

Version 0.9
-----------

.. Relase date to be decided, codename to be chosen.

リリース日とコードネームはまもなく決まります。

.. The :func:`flask.Request.on_json_loading_failed` now returns a JSON formatted
   response by default.
.. The :func:`flask.url_for` function now can generate anchors to the
   generated links.
.. The :func:`flask.url_for` function now can also explicitly generate
   URL rules specific to a given HTTP method.
.. Logger now only returns the debug log setting if it was not set
   explicitly.
.. Unregister a circular dependency between the WSGI environment and
   the request object when shutting down the request.  This means that
   environ ``werkzeug.request`` will be `None` after the response was
   returned to the WSGI server but has the advantage that the garbage
   collector is not needed on CPython to tear down the request unless
   the user created circular dependencies themselves.
.. Session is now stored after callbacks so that if the session payload
   is stored in the session you can still modify it in an after
   request callback.
.. The :class:`flask.Flask` class will avoid importing the provided import name
   if it can (the required first parameter), to benefit tools which build Flask
   instances programmatically.  The Flask class will fall back to using import
   on systems with custom module hooks, e.g. Google App Engine, or when the
   import name is inside a zip archive (usually a .egg) prior to Python 2.7.
.. Blueprints now have a decorator to add custom template filters application
   wide, :meth:`flask.Blueprint.app_template_filter`.
.. The Flask and Blueprint classes now have a non-decorator method for adding
   custom template filters application wide,
   :meth:`flask.Flask.add_template_filter` and
   :meth:`flask.Blueprint.add_app_template_filter`.
.. The :func:`flask.get_flashed_messages` function now allows rendering flashed
   message categories in separate blocks, through a ``category_filter``
   argument.
.. The :meth:`flask.Flask.run` method now accepts `None` for `host` and `port`
   arguments, using default values when `None`.  This allows for calling run
   using configuration values, e.g. ``app.run(app.config.get('MYHOST'),
   app.config.get('MYPORT'))``, with proper behavior whether or not a config
   file is provided.
.. The :meth:`flask.render_template` method now accepts a either an iterable of
   template names or a single template name.  Previously, it only accepted a
   single template name.  On an iterable, the first template found is rendered.
.. Added :meth:`flask.Flask.app_context` which works very similar to the
   request context but only provides access to the current application.  This
   also adds support for URL generation without an active request context.
.. View functions can now return a tuple with the first instance being an
   instance of :class:`flask.Response`.  This allows for returning
   ``jsonify(error="error msg"), 400`` from a view function.
.. :class:`~flask.Flask` and :class:`~flask.Blueprint` now provide a
   :meth:`~flask.Flask.get_send_file_max_age` hook for subclasses to override
   behavior of serving static files from Flask when using
   :meth:`flask.Flask.send_static_file` (used for the default static file
   handler) and :func:`~flask.helpers.send_file`.  This hook is provided a
   filename, which for example allows changing cache controls by file extension.
   The default max-age for `send_file` and static files can be configured
   through a new ``SEND_FILE_MAX_AGE_DEFAULT`` configuration variable, which is
   used in the default `get_send_file_max_age` implementation.
.. Fixed an assumption in sessions implementation which could break message
   flashing on sessions implementations which use external storage.
.. Changed the behavior of tuple return values from functions.  They are no
   longer arguments to the response object, they now have a defined meaning.
.. Added :attr:`flask.Flask.request_globals_class` to allow a specific class to
   be used on creation of the :data:`~flask.g` instance of each request.
.. Added `required_methods` attribute to view functions to force-add methods
   on registration.
.. Added :func:`flask.after_this_request`.

- :func:`flask.Request.on_json_loading_failed` は、標準でJSONフォーマットのレスポンスを返します。
- :func:`flask.url_for` 関数は、生成済みのリンクに対するアンカーを生成することができます。
- :func:`flask.url_for` 関数は、与えられたHTTPメソッドに固有のURLのルールを明示的に生成することができます。
- ロガーは明示的に設定されていない場合は、デバッグログの設定返します。
- リクエストが途切れたときに、WSGIの環境とリクエストオブジェクトの間の依存関係を解除します。
  これは、レスポンスがWSGIサーバーから返された後、 ``werkzeug.request`` は `None` になるということを意味しています。
  しかし、CPythonではガベージコレクションは必要ないというアドバンテージがあります。
- セッションはコールバックの後に格納されるので、セッションに格納されたセッションの内容はリクエストのコールバック後に修正することができます。
- The :class:`flask.Flask` class will avoid importing the provided import name
  if it can (the required first parameter), to benefit tools which build Flask
  instances programmatically.  The Flask class will fall back to using import
  on systems with custom module hooks, e.g. Google App Engine, or when the
  import name is inside a zip archive (usually a .egg) prior to Python 2.7.
- Blueprintは、 :meth:`flask.Blueprint.app_template_filter` でアプリケーション
  全体にカスタムテンプレートフィルターを追加するためのデコレーターがあります。
- FlaskとBlueprintクラスは、 :meth:`flask.Flask.add_template_filter` と
  :meth:`flask.Blueprint.add_app_template_filter` でアプリケーション全体に
  カスタムテンプレートフィルターを追加するためのデコレーターではないメソッドを持っています。
- The :func:`flask.get_flashed_messages` function now allows rendering flashed
  message categories in separate blocks, through a ``category_filter``
  argument.
- The :meth:`flask.Flask.run` method now accepts `None` for `host` and `port`
  arguments, using default values when `None`.  This allows for calling run
  using configuration values, e.g. ``app.run(app.config.get('MYHOST'),
  app.config.get('MYPORT'))``, with proper behavior whether or not a config
  file is provided.
- The :meth:`flask.render_template` method now accepts a either an iterable of
  template names or a single template name.  Previously, it only accepted a
  single template name.  On an iterable, the first template found is rendered.
- ビュー関数は :class:`flask.Response` のインスタンスで、タプルを返します。
  これは、ビュー関数から ``jsonify(error="error msg"), 400`` を返すことを認めます。
- :class:`~flask.Flask` and :class:`~flask.Blueprint` now provide a
  :meth:`~flask.Flask.get_send_file_max_age` hook for subclasses to override
  behavior of serving static files from Flask when using
  :meth:`flask.Flask.send_static_file` (used for the default static file
  handler) and :func:`~flask.helpers.send_file`.  This hook is provided a
  filename, which for example allows changing cache controls by file extension.
  The default max-age for `send_file` and static files can be configured
  through a new ``SEND_FILE_MAX_AGE_DEFAULT`` configuration variable, which is
  used in the default `get_send_file_max_age` implementation.
- Fixed an assumption in sessions implementation which could break message
  flashing on sessions implementations which use external storage.
- Changed the behavior of tuple return values from functions.  They are no
  longer arguments to the response object, they now have a defined meaning.
- Added :attr:`flask.Flask.request_globals_class` to allow a specific class to
  be used on creation of the :data:`~flask.g` instance of each request.
- Added `required_methods` attribute to view functions to force-add methods
  on registration.
- ビュー関数に `required_methods` アトリビュートを追加しました。
- :func:`flask.after_this_request` を追加しました。

Version 0.8.1
-------------

.. Bugfix release, release date to be decided

バグフィックス、リリース日はまもなく決まります。

.. Fixed an issue with the undocumented `flask.session` module to not
   work properly on Python 2.5.  It should not be used but did cause
   some problems for package managers.

- Python 2.5で適切に動作しなかった `flask.session` モジュールは、ドキュメント化されていなかったので対応しました。
  そのモジュールは使うべきではないが、パッケージマネージャーでいくつかの問題がありました。

Version 0.8
-----------

.. Released on September 29th 2011, codename Rakija

2011年9月29日リリース、コードネームはRakijaです。

.. Refactored session support into a session interface so that
   the implementation of the sessions can be changed without
   having to override the Flask class.
.. Empty session cookies are now deleted properly automatically.
.. View functions can now opt out of getting the automatic
   OPTIONS implementation.
.. HTTP exceptions and Bad Request errors can now be trapped so that they
   show up normally in the traceback.
.. Flask in debug mode is now detecting some common problems and tries to
   warn you about them.
.. Flask in debug mode will now complain with an assertion error if a view
   was attached after the first request was handled.  This gives earlier
   feedback when users forget to import view code ahead of time.
.. Added the ability to register callbacks that are only triggered once at
   the beginning of the first request. (:meth:`Flask.before_first_request`)
.. Malformed JSON data will now trigger a bad request HTTP exception instead
   of a value error which usually would result in a 500 internal server
   error if not handled.  This is a backwards incompatible change.
.. Applications now not only have a root path where the resources and modules
   are located but also an instance path which is the designated place to
   drop files that are modified at runtime (uploads etc.).  Also this is
   conceptionally only instance depending and outside version control so it's
   the perfect place to put configuration files etc.  For more information
   see :ref:`instance-folders`.
.. Added the ``APPLICATION_ROOT`` configuration variable.
.. Implemented :meth:`~flask.testing.TestClient.session_transaction` to
   easily modify sessions from the test environment.
.. Refactored test client internally.  The ``APPLICATION_ROOT`` configuration
   variable as well as ``SERVER_NAME`` are now properly used by the test client
   as defaults.
.. Added :attr:`flask.views.View.decorators` to support simpler decorating of
   pluggable (class-based) views.
.. Fixed an issue where the test client if used with the "with" statement did not
   trigger the execution of the teardown handlers.
.. Added finer control over the session cookie parameters.
.. HEAD requests to a method view now automatically dispatch to the `get`
   method if no handler was implemented.
.. Implemented the virtual :mod:`flask.ext` package to import extensions from.
.. The context preservation on exceptions is now an integral component of
   Flask itself and no longer of the test client.  This cleaned up some
   internal logic and lowers the odds of runaway request contexts in unittests.

- sessionをリファクタリングして、Flaskクラスを上書きしなくても、セッションの実装を
  変更できるセッションインターフェースをサポートしました。
- 空のセッションクッキーが自動で適切に削除されません。
- ビュー関数が自動的にOPTIONSを実装するかどうかを任意で決めることができます。
- HTTP exceptions and Bad Request errors can now be trapped so that they
  show up normally in the traceback.
- Flask in debug mode is now detecting some common problems and tries to
  warn you about them.
- Flask in debug mode will now complain with an assertion error if a view
  was attached after the first request was handled.  This gives earlier
  feedback when users forget to import view code ahead of time.
- Added the ability to register callbacks that are only triggered once at
  the beginning of the first request. (:meth:`Flask.before_first_request`)
- Malformed JSON data will now trigger a bad request HTTP exception instead
  of a value error which usually would result in a 500 internal server
  error if not handled.  This is a backwards incompatible change.
- Applications now not only have a root path where the resources and modules
  are located but also an instance path which is the designated place to
  drop files that are modified at runtime (uploads etc.).  Also this is
  conceptionally only instance depending and outside version control so it's
  the perfect place to put configuration files etc.  For more information
  see :ref:`instance-folders`.
- Added the ``APPLICATION_ROOT`` configuration variable.
- Implemented :meth:`~flask.testing.TestClient.session_transaction` to
  easily modify sessions from the test environment.
- Refactored test client internally.  The ``APPLICATION_ROOT`` configuration
  variable as well as ``SERVER_NAME`` are now properly used by the test client
  as defaults.
- Added :attr:`flask.views.View.decorators` to support simpler decorating of
  pluggable (class-based) views.
- Fixed an issue where the test client if used with the "with" statement did not
  trigger the execution of the teardown handlers.
- Added finer control over the session cookie parameters.
- HEAD requests to a method view now automatically dispatch to the `get`
  method if no handler was implemented.
- エクステンションをインポートするために :mod:`flask.ext` パッケージを実装しました。
- The context preservation on exceptions is now an integral component of
  Flask itself and no longer of the test client.  This cleaned up some
  internal logic and lowers the odds of runaway request contexts in unittests.

Version 0.7.3
-------------

.. Bugfix release, release date to be decided

バグフィックス、リリース日はまもなく決まります。

.. Fixed the Jinja2 environment's list_templates method not returning the
   correct names when blueprints or modules were involved.

- Jinja2のenvironmentのlist_templatesメソッドは、
  blueprintsやmodulesが組み込まれている時に正しい名前を返さない問題を修正しました。

Version 0.7.2
-------------

.. Bugfix release, released on July 6th 2011

バグフィックスで2011年7月6日にリリースしました。

.. Fixed an issue with URL processors not properly working on
   blueprints.

- BlueprintsのURLの処理が正常に動作しない問題を修正しました。

Version 0.7.1
-------------

.. Bugfix release, released on June 29th 2011

バグフィックスで2011年6月29日にリリースしました。

.. Added missing future import that broke 2.5 compatibility.
.. Fixed an infinite redirect issue with blueprints.

- Python 2.5との互換性がなくなるので、future importがないところに追加しました。
- Blueprintsで無限にリダイレクトされる問題を修正しました。

Version 0.7
-----------

.. Released on June 28th 2011, codename Grappa

2011年6月28日リリース、コードネームはGrappaです。

.. Added :meth:`~flask.Flask.make_default_options_response`
   which can be used by subclasses to alter the default
   behavior for `OPTIONS` responses.
.. Unbound locals now raise a proper :exc:`RuntimeError` instead
   of an :exc:`AttributeError`.
.. Mimetype guessing and etag support based on file objects is now
   deprecated for :func:`flask.send_file` because it was unreliable.
   Pass filenames instead or attach your own etags and provide a
   proper mimetype by hand.
.. Static file handling for modules now requires the name of the
   static folder to be supplied explicitly.  The previous autodetection
   was not reliable and caused issues on Google's App Engine.  Until
   1.0 the old behavior will continue to work but issue dependency
   warnings.
.. fixed a problem for Flask to run on jython.
.. added a `PROPAGATE_EXCEPTIONS` configuration variable that can be
   used to flip the setting of exception propagation which previously
   was linked to `DEBUG` alone and is now linked to either `DEBUG` or
   `TESTING`.
.. Flask no longer internally depends on rules being added through the
   `add_url_rule` function and can now also accept regular werkzeug
   rules added to the url map.
.. Added an `endpoint` method to the flask application object which
   allows one to register a callback to an arbitrary endpoint with
   a decorator.
.. Use Last-Modified for static file sending instead of Date which
   was incorrectly introduced in 0.6.
.. Added `create_jinja_loader` to override the loader creation process.
.. Implemented a silent flag for `config.from_pyfile`.
.. Added `teardown_request` decorator, for functions that should run at the end
   of a request regardless of whether an exception occurred.  Also the behavior
   for `after_request` was changed.  It's now no longer executed when an exception
   is raised.  See :ref:`upgrading-to-new-teardown-handling`
.. Implemented :func:`flask.has_request_context`
.. Deprecated `init_jinja_globals`.  Override the
   :meth:`~flask.Flask.create_jinja_environment` method instead to
   achieve the same functionality.
.. Added :func:`flask.safe_join`
.. The automatic JSON request data unpacking now looks at the charset
   mimetype parameter.
.. Don't modify the session on :func:`flask.get_flashed_messages` if there
   are no messages in the session.
.. `before_request` handlers are now able to abort requests with errors.
.. it is not possible to define user exception handlers.  That way you can
   provide custom error messages from a central hub for certain errors that
   might occur during request processing (for instance database connection
   errors, timeouts from remote resources etc.).
.. Blueprints can provide blueprint specific error handlers.
.. Implemented generic :ref:`views` (class-based views).

- :meth:`~flask.Flask.make_default_options_response` を追加しました。
  これは
- Added :meth:`~flask.Flask.make_default_options_response`
  which can be used by subclasses to alter the default
  behaviour for `OPTIONS` responses.
- Unbound locals now raise a proper :exc:`RuntimeError` instead
  of an :exc:`AttributeError`.
- Mimetype guessing and etag support based on file objects is now
  deprecated for :func:`flask.send_file` because it was unreliable.
  Pass filenames instead or attach your own etags and provide a
  proper mimetype by hand.
- Static file handling for modules now requires the name of the
  static folder to be supplied explicitly.  The previous autodetection
  was not reliable and caused issues on Google's App Engine.  Until
  1.0 the old behaviour will continue to work but issue dependency
  warnings.
- fixed a problem for Flask to run on jython.
- added a `PROPAGATE_EXCEPTIONS` configuration variable that can be
  used to flip the setting of exception propagation which previously
  was linked to `DEBUG` alone and is now linked to either `DEBUG` or
  `TESTING`.
- Flask no longer internally depends on rules being added through the
  `add_url_rule` function and can now also accept regular werkzeug
  rules added to the url map.
- Added an `endpoint` method to the flask application object which
  allows one to register a callback to an arbitrary endpoint with
  a decorator.
- Use Last-Modified for static file sending instead of Date which
  was incorrectly introduced in 0.6.
- ローダーの作成する処理を上書きする `create_jinja_loader` を追加しました。
- `config.from_pyfile` に何もしないフラグを実装しました。
- Added `teardown_request` decorator, for functions that should run at the end
  of a request regardless of whether an exception occurred.  Also the behavior
  for `after_request` was changed.  It's now no longer executed when an exception
  is raised.  See :ref:`upgrading-to-new-teardown-handling`
- :func:`flask.has_request_context` を実装しました。
- Deprecated `init_jinja_globals`.  Override the
  :meth:`~flask.Flask.create_jinja_environment` method instead to
  achieve the same functionality.
- :func:`flask.safe_join` を追加しました。
- 自動でJSONのリクエストデータを展開してmimetypeのパラメーターから文字コードを調べます。
- セッションにメッセージがない場合、 :func:`flask.get_flashed_messages` で、セッションを修正しないようにしました。
- `before_request` ハンドラーは、エラー時にリクエストを中止することができます。
- it is not possible to define user exception handlers.  That way you can
  provide custom error messages from a central hub for certain errors that
  might occur during request processing (for instance database connection
  errors, timeouts from remote resources etc.).
- Blueprintsはblueprint独自のエラーハンドラーを付けることができます。
- 汎用 :ref:`views` (クラスベースのビュー)を実装しました。

Version 0.6.1
-------------

.. Bugfix release, released on December 31st 2010

バグフィックスで2010年12月31日にリリースしました。

.. Fixed an issue where the default `OPTIONS` response was
   not exposing all valid methods in the `Allow` header.
.. Jinja2 template loading syntax now allows "./" in front of
   a template load path.  Previously this caused issues with
   module setups.
.. Fixed an issue where the subdomain setting for modules was
   ignored for the static folder.
.. Fixed a security problem that allowed clients to download arbitrary files
   if the host server was a windows based operating system and the client
   uses backslashes to escape the directory the files where exposed from.

- デフォルトの `OPTIONS` レスポンスは
- Jinja2のテンプレートロードパスの前に "./" を書くことができます。
- モジュールにサブドメインを設定した場合に、静的フォルダを無視する問題を修正しました。
- クライアントが任意のファイルをダウンロードできるセキュリティの問題をフィックスしました。ホストサーバーは
  公開されているファイルディレクトリを回避するためにバックスラッシュを使う。

Version 0.6
-----------

.. Released on July 27th 2010, codename Whisky

2010年7月27日リリース、コードネームはWhiskyです。

.. after request functions are now called in reverse order of
   registration.
.. OPTIONS is now automatically implemented by Flask unless the
   application explicitly adds 'OPTIONS' as method to the URL rule.
   In this case no automatic OPTIONS handling kicks in.
.. static rules are now even in place if there is no static folder
   for the module.  This was implemented to aid GAE which will
   remove the static folder if it's part of a mapping in the .yml
   file.
.. the :attr:`~flask.Flask.config` is now available in the templates
   as `config`.
.. context processors will no longer override values passed directly
   to the render function.
.. added the ability to limit the incoming request data with the
   new ``MAX_CONTENT_LENGTH`` configuration value.
.. the endpoint for the :meth:`flask.Module.add_url_rule` method
   is now optional to be consistent with the function of the
   same name on the application object.
.. added a :func:`flask.make_response` function that simplifies
   creating response object instances in views.
.. added signalling support based on blinker.  This feature is currently
   optional and supposed to be used by extensions and applications.  If
   you want to use it, make sure to have `blinker`_ installed.
.. refactored the way URL adapters are created.  This process is now
   fully customizable with the :meth:`~flask.Flask.create_url_adapter`
   method.
.. modules can now register for a subdomain instead of just an URL
   prefix.  This makes it possible to bind a whole module to a
   configurable subdomain.

- after request関数は登録された逆順に呼び出されます。
- OPTIONSは、URLルールのメソッドに、 'OPTIONS' を明示的に追加するまでFlask側で自動的に実装されるようになりました。
  この場合は、OPTIONSは自動的に処理されません。
- 静的ファイルを配信するためのURLのルールは、モジュールにstaticフォルダがない場合に
  これは、 .yml ファイルのマッピングの一部のstaticフォルダを削除するGAE用に実装されました。
- :attr:`~flask.Flask.config` はテンプレートで `config` として有効化されています。
- コンテキストプロセッサーは、レンダリングする関数に直接値を渡して上書きすることはなくなりました。
- 新しい ``MAX_CONTENT_LENGTH`` 設定値で入ってくるリクエストデータを制限することできる機能を追加しました。
- :meth:`flask.Module.add_url_rule` メソッドに対するエンドポイントは、
  アプリケーションオブジェクトで同じ名前の関数現在オプションで、
- ビューでレスポンスオブジェクトのインスタンスを簡単に作ることができる :func:`flask.make_response` 関数を追加しました。
- blinkerをベースにしたシグナル機能を追加しました。
  この機能は現在オプションで、エクステンションとアプリケーションで使われると思います。
  もし使うなら、 `blinker`_ をインストールしなければいけません。
- URLアダプターの作り方を書き直しました。
  現在、この処理は :meth:`~flask.Flask.create_url_adapter` メソッドでカスタマイズすることができます。
- モジュールはURLプリフィックスの代わりのサブドメイン用に登録することができます。
  これは、すべてのモジュールを設定したサブドメインに割り当てることができます。

.. _blinker: http://pypi.python.org/pypi/blinker

Version 0.5.2
-------------

.. Bugfix Release, released on July 15th 2010

バグフィックスで2010年7月15日にリリースしました。

.. fixed another issue with loading templates from directories when
   modules were used.

- モジュールが使われているディレクトリからテンプレートを読み込む際に別の問題があるのを修正しました。

Version 0.5.1
-------------

.. Bugfix Release, released on July 6th 2010

バグフィックスで2010年7月6日にリリースしました。

.. fixes an issue with template loading from directories when modules
   where used.

- モジュールが使われているディレクトリからテンプレートを読み込む際に問題があるのを修正しました。

Version 0.5
-----------

.. Released on July 6th 2010, codename Calvados

2010年7月6日リリース、コードネームはCalvadosです。

.. fixed a bug with subdomains that was caused by the inability to
   specify the server name.  The server name can now be set with
   the `SERVER_NAME` config key.  This key is now also used to set
   the session cookie cross-subdomain wide.
.. autoescaping is no longer active for all templates.  Instead it
   is only active for ``.html``, ``.htm``, ``.xml`` and ``.xhtml``.
   Inside templates this behavior can be changed with the
   ``autoescape`` tag.
.. refactored Flask internally.  It now consists of more than a
   single file.
.. :func:`flask.send_file` now emits etags and has the ability to
   do conditional responses builtin.
.. (temporarily) dropped support for zipped applications.  This was a
   rarely used feature and led to some confusing behavior.
.. added support for per-package template and static-file directories.
.. removed support for `create_jinja_loader` which is no longer used
   in 0.5 due to the improved module support.
.. added a helper function to expose files from any directory.

- サブドメインでサーバー名を指定することができないバグをフィックスしました。
  サーバー名を `SERVER_NAME` コンフィグキーとして設定することができます。
  このキーはサブドメインをまたいでセッションクッキーを設定する時に使えます。
- 自動エスケープはすべてのテンプレートで有効化されていません。
  代わりに、 ``.html`` 、 ``.htm`` 、 ``.xml`` 、 ``.xhtml`` でのみ有効化されています。
  テンプレートの中でこの振る舞いは、 ``autoescape`` タグで変更することができます。
- Flaskの内部処理を見直しました。一つのファイルだったのを、複数のファイルに分割しました。
- :func:`flask.send_file` はETagを発行して、組み込みの条件付きレスポンスを返すことができます。
- ZIP形式のアプリケーションのサポートを(一時的に)打ち切りました。
  これは幾つかの混乱を招くもので、まれにしか使われない機能でした。
- パッケージ毎にテンプレートと静的ファイルのディレクトリを設定できるようにしました。
- 改良したモジュールをサポートしたので、0.5では `create_jinja_loader` のサポートを削除しました。
- 任意のディレクトリからファイルを公開するためのヘルパー関数を追加しました。

Version 0.4
-----------

.. Released on June 18th 2010, codename Rakia

2010年6月18日リリース、コードネームはRakiaです。

.. added the ability to register application wide error handlers
   from modules.
.. :meth:`~flask.Flask.after_request` handlers are now also invoked
   if the request dies with an exception and an error handling page
   kicks in.
.. test client has not the ability to preserve the request context
   for a little longer.  This can also be used to trigger custom
   requests that do not pop the request stack for testing.
.. because the Python standard library caches loggers, the name of
   the logger is configurable now to better support unittests.
.. added `TESTING` switch that can activate unittesting helpers.
.. the logger switches to `DEBUG` mode now if debug is enabled.

- モジュールからエラーハンドラーをアプリケーションに登録できる機能を追加しました。
- :meth:`~flask.Flask.after_request` ハンドラーはリクエストが例外やエラーページの表示することで呼び出されます。
- テストクライアントは、リクエストコンテキストを保持することができません。
  これは、テスト用にリクエストをpopせずに積んでいくカスタムリクエストのトリガーとして使うことができます。
- Pythonの標準ライブラリはロガーをキャッシュするので、ユニットテスト用にロガーの名前を設定できるようにしました。
- ユニットテストをするためのヘルパーを有効化することができる `TESTING` を追加しました。
- デバッグが有効ならロガーは `DEBUG` モードに切り替わります。

Version 0.3.1
-------------

.. Bugfix release, released on May 28th 2010

バグフィックスで2010年5月28日にリリースしました。

.. fixed a error reporting bug with :meth:`flask.Config.from_envvar`
.. removed some unused code from flask
.. release does no longer include development leftover files (.git
   folder for themes, built documentation in zip and pdf file and
   some .pyc files)

- :meth:`flask.Config.from_envvar` でバグをレポートする際のエラーを修正しました。
- flaskから使われていないコードを削除しました。
- 開発時に残されたままのファイル(テーマ用の.gitフォルダ、zipのドキュメント、pdfファイルや.pycファイル)を除きました。

Version 0.3
-----------

.. Released on May 28th 2010, codename Schnaps

2010年5月28日リリース、コードネームはSchnapsです。

.. added support for categories for flashed messages.
.. the application now configures a :class:`logging.Handler` and will
   log request handling exceptions to that logger when not in debug
   mode.  This makes it possible to receive mails on server errors
   for example.
.. added support for context binding that does not require the use of
   the with statement for playing in the console.
.. the request context is now available within the with statement making
   it possible to further push the request context or pop it.
.. added support for configurations.

- フラッシュメッセージでカテゴリのサポートを追加しました。
- アプリケーションに :class:`logging.Handler` を設定できるようになり、
  デバッグモードではない時にリクエストが例外をロガーに記録するようになりました。
  これはサーバーでエラーが発生した時にメールを受け取ることができます。
- コンテキストのバインディングをサポートしました。
  コンソールで実行するためにwith文を使う必要はありません。
- リクエストコンテキストがwith文の中で有効になって、リクエストコンテキストをpushやpopすることができます。
- 設定機能を追加しました。

Version 0.2
-----------

.. Released on May 12th 2010, codename Jägermeister

2010年5月12日リリース、コードネームはJägermeisterです。

.. various bugfixes
.. integrated JSON support
.. added :func:`~flask.get_template_attribute` helper function.
.. :meth:`~flask.Flask.add_url_rule` can now also register a
   view function.
.. refactored internal request dispatching.
.. server listens on 127.0.0.1 by default now to fix issues with chrome.
.. added external URL support.
.. added support for :func:`~flask.send_file`
.. module support and internal request handling refactoring
   to better support pluggable applications.
.. sessions can be set to be permanent now on a per-session basis.
.. better error reporting on missing secret keys.
.. added support for Google Appengine.

- 様々なバグフィックス。
- JSON機能を統合しました。
- :func:`~flask.get_template_attribute` ヘルパー関数を追加しました。
- :meth:`~flask.Flask.add_url_rule` はビュー関数も登録できるようになりました。
- 内部のリクエストを振り分けする処理をリファクタリングしました。
- デフォルトで127.0.0.1にアクセスする時にchromeで問題があるのをフィックスしました。
- 外部URLをサポートしました。
- :func:`~flask.send_file` 関数をサポートしました。
- モジュールをサポートし、プラガブルなアプリケーションをよりよくサポートするために内部のリクエスト処理を書きなおしました。
- セッション毎にセッションの有効期限が永続されるようにすることができるようになりました。
- シークレットキーがない場合にエラーレポートが実行されるようになりました。
- Google App Engineのサポートを追加しました。

Version 0.1
-----------

.. First public preview release.

最初のパブリックプレビューリリース。
